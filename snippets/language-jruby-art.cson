'.source.ruby.processing':
  Background:
    prefix: 'bkg'
    body: 'background ${1:int}'
    description: 'Method expects one argument'
    descriptionMoreURL: 'https://atom.io/packages/language-jruby-art'

  web_colors_to_colors:
    prefix: 'web'
    body: 'web_to_color_array(${1:string})'
    description: 'Method expects array of String'
  Bare:
    prefix: 'bare'
    body: '''
      def settings
        size ${1:int}, ${2:int}
        # pixel_density(2) # for HiDpi screens
        # smooth # see https://processing.org/reference/smooth_.html
      end

      def setup
        sketch_title '${3:string}'
      end

      def draw
         ${4:string}
      end
    '''
    description: 'A bare sketch template'
    descriptionMoreURL: 'https://atom.io/packages/language-jruby-art'

  Propane_Sketch:
    prefix: 'prsk'
    body: '''
      #!/usr/bin/env jruby
      require 'propane'

      class ${1:string} < Propane::App
        def settings
          size ${2:int}, ${3:int}
          # pixel_density(2) # for HiDpi screens
          # smooth # see https://processing.org/reference/smooth_.html
        end

        def setup
          sketch_title '${4:string}'
        end

        def draw
           ${5:string}
        end
      end

      ${1:string}.new
    '''
    description: 'Creates a propane sketch'
    descriptionMoreURL: 'https://ruby-processing.github.io/propane/atom-propane/'

  ArcBall:
    prefix: 'arcball'
    body: 'ArcBall.init(self)'

  Ellipse:
    prefix: 'ellipse'
    body: 'ellipse(${1:any}, ${2:any}, ${3:any}, ${4:any})'

  Line:
    prefix: 'line'
    body: 'line(${1:any}, ${2:any}, ${3:any}, ${4:any})'

  Rect:
    prefix: 'rect'
    body: 'rect(${1:any}, ${2:any}, ${3:any}, ${4:any})'

  Degree_Cosine:
    prefix: 'dgcos'
    body: 'DegLut.cos(${1:any})'

  Degree_Sine:
    prefix: 'dgsin'
    body: 'DegLut.sin(${1:any})'

  mouse_x:
    prefix: 'msx'
    body: 'mouse_x'

  mouse_y:
    prefix: 'msy'
    body: 'mouse_y'

  pmouse_x:
    prefix: 'pmsx'
    body: 'pmouse_x'

  pmouse_y:
    prefix: 'pmsy'
    body: 'pmouse_y'

  key_pressed_method:
    prefix: 'kpm'
    body: '''
      def key_pressed
        ${1:string}
      end
    '''

  key_pressed_var:
    prefix: 'kp?'
    body: 'key_pressed?'

  mouse_pressed_var:
    prefix: 'mp?'
    body: 'mouse_pressed?'

  mouse_pressed_method:
    prefix: 'mpm'
    body: '''
      def mouse_pressed
        ${1:string}
      end
    '''

  Include_Package:
    prefix: 'incp'
    body: "include_package '${1:string}'"

  Load_Library:
    prefix: 'lol'
    body: 'load_library :${1:string}'

  Load_Libraries:
    prefix: 'lols'
    body: 'load_libraries :${1:string}, :${2:string}'

  Load_Image:
    prefix: 'loi'
    body: "load_image(data_path('${1:string}'))"

  Request_Image:
    prefix: 'rqi'
    body: "request_image(data_path('${1:string}'))"

  Load_Font:
    prefix: 'lof'
    body: "load_font(data_path('${1:string}'))"

  Load_Shader:
    prefix: 'los'
    body: "load_shader(data_path('${1:string}.glsl'))"

  PushMatrix:
    prefix: 'pma'
    body: '''
      push_matrix
      # write stuff here
      pop_matrix
    '''

  Constrain:
    prefix: 'constrain'
    body: 'constrain(${1:any}, ${2:any}, ${3:any})'

  Map1D:
    prefix: 'm1d'
    body: 'map1d(${1:string}, ${2:number}..${3:number}, ${4:number}..${5:number})'

  Constrained_Map:
    prefix: 'constrain_map'
    body: 'constrained_map(${1:string}, ${2:number}..${3:number}, ${4:number}..${5:number})'

  Norm:
    prefix: 'norm'
    body: 'norm(${1:any}, ${2:any}, ${3:any})'

  Norm_Strict:
    prefix: 'strict'
    body: 'norm_strict(${1:any}, ${2:any}, ${3:any})'
